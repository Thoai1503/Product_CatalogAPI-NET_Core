// <auto-generated />
using System;
using CatalogServiceAPI_Electric_Store.Models;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace CatalogServiceAPI_Electric_Store.Migrations
{
    [DbContext(typeof(CatalogAPIContext))]
    partial class CatalogAPIContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.8")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("CatalogServiceAPI_Electric_Store.Models.Entities.Attribute", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("DataType")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("data_type");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)")
                        .HasColumnName("name");

                    b.Property<string>("Slug")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)")
                        .HasColumnName("slug");

                    b.Property<int>("Status")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasDefaultValue(1)
                        .HasColumnName("status");

                    b.Property<string>("Unit")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("unit");

                    b.HasKey("Id");

                    b.ToTable("attributes", (string)null);
                });

            modelBuilder.Entity("CatalogServiceAPI_Electric_Store.Models.Entities.Brand", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("name");

                    b.Property<string>("Slug")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(10)
                        .HasColumnType("nchar(10)")
                        .HasDefaultValue("default-slug")
                        .HasColumnName("slug")
                        .IsFixedLength();

                    b.Property<int>("Status")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasDefaultValue(1)
                        .HasColumnName("status");

                    b.HasKey("Id")
                        .HasName("PK__brands__3213E83FBBDEC841");

                    b.ToTable("brands", (string)null);
                });

            modelBuilder.Entity("CatalogServiceAPI_Electric_Store.Models.Entities.Category", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasColumnName("created_at")
                        .HasDefaultValueSql("(sysutcdatetime())");

                    b.Property<int>("Level")
                        .HasColumnType("int")
                        .HasColumnName("level");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(120)
                        .HasColumnType("nvarchar(120)")
                        .HasColumnName("name");

                    b.Property<int?>("ParentId")
                        .HasColumnType("int")
                        .HasColumnName("parent_id");

                    b.Property<string>("Path")
                        .HasMaxLength(400)
                        .HasColumnType("nvarchar(400)")
                        .HasColumnName("path");

                    b.Property<string>("Slug")
                        .IsRequired()
                        .HasMaxLength(140)
                        .HasColumnType("nvarchar(140)")
                        .HasColumnName("slug");

                    b.Property<int>("Status")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasDefaultValue(1)
                        .HasColumnName("status");

                    b.HasKey("Id")
                        .HasName("PK__Categori__3214EC0735611CED");

                    b.HasIndex(new[] { "Slug" }, "UQ__Categori__BC7B5FB6F07DC5B5")
                        .IsUnique();

                    b.ToTable("categories", (string)null);
                });

            modelBuilder.Entity("CatalogServiceAPI_Electric_Store.Models.Entities.CategoryAttribute", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("AttributeId")
                        .HasColumnType("int")
                        .HasColumnName("attribute_id");

                    b.Property<int>("CategoryId")
                        .HasColumnType("int")
                        .HasColumnName("category_id");

                    b.Property<bool>("IsFilterable")
                        .HasColumnType("bit")
                        .HasColumnName("is_filterable");

                    b.Property<bool>("IsRequired")
                        .HasColumnType("bit")
                        .HasColumnName("is_required");

                    b.Property<bool>("IsVariantLevel")
                        .HasColumnType("bit")
                        .HasColumnName("is_variant_level");

                    b.HasKey("Id");

                    b.HasIndex("AttributeId");

                    b.HasIndex("CategoryId");

                    b.ToTable("category_attributes", (string)null);
                });

            modelBuilder.Entity("CatalogServiceAPI_Electric_Store.Models.Entities.Product", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int?>("BrandId")
                        .HasColumnType("int")
                        .HasColumnName("brand_id");

                    b.Property<int>("CategoryId")
                        .HasColumnType("int")
                        .HasColumnName("category_id");

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasColumnName("created_at")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(1000)
                        .HasColumnType("nchar(1000)")
                        .HasColumnName("description")
                        .IsFixedLength();

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)")
                        .HasColumnName("name");

                    b.Property<decimal>("Rating")
                        .HasColumnType("decimal(3, 2)")
                        .HasColumnName("rating");

                    b.Property<string>("Slug")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nchar(100)")
                        .HasColumnName("slug")
                        .IsFixedLength();

                    b.Property<int>("Status")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasDefaultValue(1)
                        .HasColumnName("status");

                    b.HasKey("Id");

                    b.HasIndex("BrandId");

                    b.HasIndex("CategoryId");

                    b.ToTable("products", (string)null);
                });

            modelBuilder.Entity("CatalogServiceAPI_Electric_Store.Models.Entities.ProductAttribute", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("AttributeId")
                        .HasColumnType("int")
                        .HasColumnName("attribute_id");

                    b.Property<int>("ProductId")
                        .HasColumnType("int")
                        .HasColumnName("product_id");

                    b.Property<decimal?>("ValueDecimal")
                        .HasColumnType("decimal(18, 0)")
                        .HasColumnName("value_decimal");

                    b.Property<int?>("ValueInt")
                        .HasColumnType("int")
                        .HasColumnName("value_int");

                    b.Property<string>("ValueText")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("value_text");

                    b.HasKey("Id");

                    b.HasIndex("AttributeId");

                    b.HasIndex("ProductId");

                    b.ToTable("product_attribute", (string)null);
                });

            modelBuilder.Entity("CatalogServiceAPI_Electric_Store.Models.Entities.ProductImage", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("ProductId")
                        .HasColumnType("int")
                        .HasColumnName("product_id");

                    b.Property<string>("Url")
                        .IsRequired()
                        .HasMaxLength(250)
                        .IsUnicode(false)
                        .HasColumnType("varchar(250)")
                        .HasColumnName("url");

                    b.Property<int>("VariantId")
                        .HasColumnType("int")
                        .HasColumnName("variant_id");

                    b.HasKey("Id");

                    b.HasIndex("VariantId");

                    b.ToTable("product_image", (string)null);
                });

            modelBuilder.Entity("CatalogServiceAPI_Electric_Store.Models.Entities.ProductVariant", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasColumnName("created_at")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<string>("Name")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(50)
                        .HasColumnType("nchar(50)")
                        .HasDefaultValue("default")
                        .HasColumnName("name")
                        .IsFixedLength();

                    b.Property<int>("Price")
                        .HasColumnType("int")
                        .HasColumnName("price");

                    b.Property<int>("ProductId")
                        .HasColumnType("int")
                        .HasColumnName("product_id");

                    b.Property<string>("Sku")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nchar(100)")
                        .HasColumnName("SKU")
                        .IsFixedLength();

                    b.Property<int>("Status")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasDefaultValue(1)
                        .HasColumnName("status");

                    b.HasKey("Id");

                    b.HasIndex("ProductId");

                    b.ToTable("product_variants", (string)null);
                });

            modelBuilder.Entity("CatalogServiceAPI_Electric_Store.Models.Entities.User", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<byte[]>("CreatedAt")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("rowversion")
                        .HasColumnName("created_at");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nchar(50)")
                        .HasColumnName("email")
                        .IsFixedLength();

                    b.Property<string>("FullName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("full_name");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasMaxLength(150)
                        .HasColumnType("nchar(150)")
                        .HasColumnName("password")
                        .IsFixedLength();

                    b.Property<string>("Phone")
                        .IsRequired()
                        .HasMaxLength(11)
                        .HasColumnType("nchar(11)")
                        .HasColumnName("phone")
                        .IsFixedLength();

                    b.Property<int>("Role")
                        .HasColumnType("int")
                        .HasColumnName("role");

                    b.Property<int>("Status")
                        .HasColumnType("int")
                        .HasColumnName("status");

                    b.HasKey("Id")
                        .HasName("PK__users__3213E83FA25F67D3");

                    b.ToTable("users", (string)null);
                });

            modelBuilder.Entity("CatalogServiceAPI_Electric_Store.Models.Entities.VariantAttribute", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("AttributeId")
                        .HasColumnType("int")
                        .HasColumnName("attribute_id");

                    b.Property<decimal?>("ValueDecimal")
                        .HasColumnType("decimal(18, 0)")
                        .HasColumnName("value_decimal");

                    b.Property<int?>("ValueInt")
                        .HasColumnType("int")
                        .HasColumnName("value_int");

                    b.Property<string>("ValueText")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("value_text");

                    b.Property<int>("VariantId")
                        .HasColumnType("int")
                        .HasColumnName("variant_id");

                    b.HasKey("Id");

                    b.HasIndex("AttributeId");

                    b.HasIndex("VariantId");

                    b.ToTable("variant_attribute", (string)null);
                });

            modelBuilder.Entity("CatalogServiceAPI_Electric_Store.Models.Entities.CategoryAttribute", b =>
                {
                    b.HasOne("CatalogServiceAPI_Electric_Store.Models.Entities.Attribute", "Attribute")
                        .WithMany("CategoryAttributes")
                        .HasForeignKey("AttributeId")
                        .IsRequired()
                        .HasConstraintName("FK_category_attributes_attributes");

                    b.HasOne("CatalogServiceAPI_Electric_Store.Models.Entities.Category", "Category")
                        .WithMany("CategoryAttributes")
                        .HasForeignKey("CategoryId")
                        .IsRequired()
                        .HasConstraintName("FK_category_attributes_categories");

                    b.Navigation("Attribute");

                    b.Navigation("Category");
                });

            modelBuilder.Entity("CatalogServiceAPI_Electric_Store.Models.Entities.Product", b =>
                {
                    b.HasOne("CatalogServiceAPI_Electric_Store.Models.Entities.Brand", "Brand")
                        .WithMany("Products")
                        .HasForeignKey("BrandId")
                        .HasConstraintName("FK_products_brands");

                    b.HasOne("CatalogServiceAPI_Electric_Store.Models.Entities.Category", "Category")
                        .WithMany("Products")
                        .HasForeignKey("CategoryId")
                        .IsRequired()
                        .HasConstraintName("FK_products_categories");

                    b.Navigation("Brand");

                    b.Navigation("Category");
                });

            modelBuilder.Entity("CatalogServiceAPI_Electric_Store.Models.Entities.ProductAttribute", b =>
                {
                    b.HasOne("CatalogServiceAPI_Electric_Store.Models.Entities.Attribute", "Attribute")
                        .WithMany("ProductAttributes")
                        .HasForeignKey("AttributeId")
                        .IsRequired()
                        .HasConstraintName("FK_product_attribute_attributes");

                    b.HasOne("CatalogServiceAPI_Electric_Store.Models.Entities.Product", "Product")
                        .WithMany("ProductAttributes")
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_product_attribute_products");

                    b.Navigation("Attribute");

                    b.Navigation("Product");
                });

            modelBuilder.Entity("CatalogServiceAPI_Electric_Store.Models.Entities.ProductImage", b =>
                {
                    b.HasOne("CatalogServiceAPI_Electric_Store.Models.Entities.ProductVariant", "Variant")
                        .WithMany("ProductImages")
                        .HasForeignKey("VariantId")
                        .IsRequired()
                        .HasConstraintName("FK_product_image_product_variants");

                    b.Navigation("Variant");
                });

            modelBuilder.Entity("CatalogServiceAPI_Electric_Store.Models.Entities.ProductVariant", b =>
                {
                    b.HasOne("CatalogServiceAPI_Electric_Store.Models.Entities.Product", "Product")
                        .WithMany("ProductVariants")
                        .HasForeignKey("ProductId")
                        .IsRequired()
                        .HasConstraintName("FK_product_variants_products");

                    b.Navigation("Product");
                });

            modelBuilder.Entity("CatalogServiceAPI_Electric_Store.Models.Entities.VariantAttribute", b =>
                {
                    b.HasOne("CatalogServiceAPI_Electric_Store.Models.Entities.Attribute", "Attribute")
                        .WithMany("VariantAttributes")
                        .HasForeignKey("AttributeId")
                        .IsRequired()
                        .HasConstraintName("FK_variant_attribute_attributes");

                    b.HasOne("CatalogServiceAPI_Electric_Store.Models.Entities.ProductVariant", "Variant")
                        .WithMany("VariantAttributes")
                        .HasForeignKey("VariantId")
                        .IsRequired()
                        .HasConstraintName("FK_variant_attribute_product_variants");

                    b.Navigation("Attribute");

                    b.Navigation("Variant");
                });

            modelBuilder.Entity("CatalogServiceAPI_Electric_Store.Models.Entities.Attribute", b =>
                {
                    b.Navigation("CategoryAttributes");

                    b.Navigation("ProductAttributes");

                    b.Navigation("VariantAttributes");
                });

            modelBuilder.Entity("CatalogServiceAPI_Electric_Store.Models.Entities.Brand", b =>
                {
                    b.Navigation("Products");
                });

            modelBuilder.Entity("CatalogServiceAPI_Electric_Store.Models.Entities.Category", b =>
                {
                    b.Navigation("CategoryAttributes");

                    b.Navigation("Products");
                });

            modelBuilder.Entity("CatalogServiceAPI_Electric_Store.Models.Entities.Product", b =>
                {
                    b.Navigation("ProductAttributes");

                    b.Navigation("ProductVariants");
                });

            modelBuilder.Entity("CatalogServiceAPI_Electric_Store.Models.Entities.ProductVariant", b =>
                {
                    b.Navigation("ProductImages");

                    b.Navigation("VariantAttributes");
                });
#pragma warning restore 612, 618
        }
    }
}
